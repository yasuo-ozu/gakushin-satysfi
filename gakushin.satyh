@require: hdecoset
@require: vdecoset
@require: pervasives
@require: gr
@require: list
@require: math
@require: code
@require: color
@require: option
@require: annot
@require: footnote-scheme
@require: fss/fss
@require: fss/style


module GakushinClass : sig

    val document : inline-text -> block-text -> block-text -> block-text -> block-text -> block-text -> block-text -> block-text -> document

    val font-latin-roman  : string * float * float
    val font-latin-italic : string * float * float
    val font-latin-bold   : string * float * float
    val font-latin-sans   : string * float * float
    val font-latin-mono   : string * float * float
    val font-cjk-mincho   : string * float * float
    val font-cjk-gothic   : string * float * float
    val set-latin-font : (string * float * float) -> context -> context
    val set-cjk-font   : (string * float * float) -> context -> context
    direct \dfn : [inline-text] inline-cmd
    direct \ref : [string] inline-cmd
    direct \ref-eq : [string] inline-cmd
    direct \ref-eqq : [string; string] inline-cmd
    direct \ref-chap : [string] inline-cmd
    direct \ref-sec : [string] inline-cmd
    direct \ref-tbl : [string] inline-cmd
    direct \ref-fig : [string] inline-cmd
    direct \ref-page : [string] inline-cmd
    direct +figure : [string?; inline-text; block-text] block-cmd
    direct +p : [inline-text] block-cmd
    direct +section : [string?; string?; inline-text; block-text] block-cmd
    direct +section-no-number : [string?; inline-text; block-text] block-cmd
    direct +subsection : [string?; string?; inline-text; block-text] block-cmd
    direct +definition : [inline-text?; string?; inline-text] block-cmd
    direct +theorem : [inline-text?; string?; inline-text] block-cmd
    direct +example : [inline-text?; string?; inline-text] block-cmd
    direct +lemma : [inline-text?; string?; inline-text] block-cmd
    direct +corollary : [inline-text?; string?; inline-text] block-cmd
    direct +proof : [inline-text?; inline-text] block-cmd
    direct \emph : [inline-text] inline-cmd
    direct \dfn : [inline-text] inline-cmd
    direct \footnote : [inline-text] inline-cmd

end = struct

    type toc-element =
        | TOCElementChapter    of string * inline-text
        | TOCElementSection    of string * inline-text
        | TOCElementSectionNoNumber  of string * inline-text
        | TOCElementSubsection of string * inline-text


    let generate-fresh-label =
        let-mutable count <- 0 in
        (fun () -> (
            let () = count <- !count + 1 in
            `generated:` ^ (arabic (!count))
        ))


    let no-pads = (0pt, 0pt, 0pt, 0pt)

    let-inline ctx \ref key =
        let opt = get-cross-reference (key ^ `:num`) in
        let it =
            match opt with
            | None    -> {?}
            | Some(s) -> embed-string s
        in
        inline-frame-breakable no-pads (Annot.link-to-location-frame key None) (read-inline ctx it)


    let-inline ctx \ref-page key =
        let opt = get-cross-reference (key ^ `:page`) in
        let it =
            match opt with
            | None    -> {?}
            | Some(s) -> embed-string s
        in
        inline-frame-breakable no-pads (Annot.link-to-location-frame key None) (read-inline ctx it)

    let-inline ctx \ref-eq r =
        let tag = `eq:` ^ r in
        read-inline ctx {式(\ref(tag);)}

    let-inline ctx \ref-eqq r1 r2 =
        let tag1 = `eq:` ^ r1 in
        let tag2 = `eq:` ^ r2 in
        read-inline ctx {式(\ref(tag1);)-(\ref(tag2);)}

    let-inline ctx \ref-chap r =
        let tag = `chap:` ^ r in
        read-inline ctx {\ref(tag);章}

    let-inline ctx \ref-sec r =
        let tag = `sec:` ^ r in
        read-inline ctx {\ref(tag);節}

    let-inline ctx \ref-tbl r =
        let tag = `tbl:` ^ r in
        read-inline ctx {表\ref(tag);}

    let-inline ctx \ref-fig r =
        let tag = `fig:` ^ r in
        read-inline ctx {図\ref(tag);}

    let font-size-main = 13pt
    let font-size-section = font-size-main
    let font-size-subsection = font-size-main
    let leading-main = 18pt

    let section-top-margin = 0pt
    let section-bottom-margin = 0pt

    let font-ratio-latin = 1.
    let font-ratio-cjk = 0.88

    let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
    let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
    let font-latin-bold   = (`Junicode-b` , font-ratio-latin, 0.)
    let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
    let font-latin-mono   = (`lmmono`    , font-ratio-latin, 0.)
    let font-cjk-mincho   = (`ipaexm`    , font-ratio-cjk  , 0.)
    let font-cjk-gothic   = (`ipaexg`    , font-ratio-cjk  , 0.)


    let set-latin-font font ctx =
        ctx |> set-font Latin font


    let set-cjk-font font ctx =
        ctx |> set-font HanIdeographic font
            |> set-font Kana           font

    let-inline ctx \dfn word =
        let ctx-dfn =
            ctx |> set-latin-font font-latin-sans
                |> set-cjk-font font-cjk-gothic
                |> set-text-color (RGB(0.8, 0., 0.))
        in
        read-inline ctx-dfn word


    let get-standard-context wid =
        get-initial-context wid (command \math)
            |> set-code-text-command (command \code)
            |> set-dominant-wide-script Kana
            |> set-language Kana Japanese
            |> set-language HanIdeographic Japanese
            |> set-dominant-narrow-script Latin
            |> set-language Latin English
            |> set-font Kana           font-cjk-mincho
            |> set-font HanIdeographic font-cjk-mincho
            |> set-font Latin          font-latin-roman
            |> set-math-font `lmodern`
            |> set-hyphen-penalty 100
            |> set-leading leading-main % 14
            |> set-paragraph-margin 5pt 5pt


    let-mutable ref-figure <- 0

    let-mutable num-chapter <- 0
    let-mutable num-subchap <- 0
    let-mutable num-section <- 0
    let-mutable num-subsection <- 0
    let-mutable num-theorems <- 0


    let-block ctx +figure ?:labelopt caption inner =
        let () = ref-figure <- !ref-figure + 1 in
        let s-num = arabic (!ref-figure) in
        let () =
            match labelopt with
            | Some(label) -> register-cross-reference (label ^ `:num`) s-num
            | None        -> ()
        in
        let it-num = embed-string s-num in
        let ds =
            match labelopt with
            | Some(label) -> Annot.register-location-frame label
            | None        ->
                  let d (_, _) _ _ _ = [] in (d, d, d, d)
        in
        block-frame-breakable ctx (2pt, 2pt, 2pt, 2pt) ds (fun ctx -> (
            let ctx-cap = set-font-size 9pt ctx in
            read-block ctx inner
                +++ line-break true true ctx (inline-fil ++ read-inline ctx-cap {図#it-num; #caption;} ++ inline-fil)
        ))

    let make-section-title ctx =
        ctx |> set-font-size font-size-section
            |> set-font Latin font-latin-sans
            |> set-cjk-font font-cjk-gothic


    let make-subsection-title ctx =
        ctx |> set-font-size font-size-subsection
            |> set-font Latin font-latin-sans
            |> set-cjk-font font-cjk-gothic

    let-mutable outline-ref <- []

    let get-cross-reference-number label =
        match get-cross-reference (label ^ `:num`) with
        | None    -> `?`
        | Some(s) -> s


    let get-cross-reference-page label =
        match get-cross-reference (label ^ `:page`) with
        | None    -> `?`
        | Some(s) -> s


    let section-heading ctx ib-heading =
        line-break true false
            (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
                ib-heading

    let section-no-number-heading ctx ib-heading =
        line-break true false
            (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
                ib-heading


    let-inline ctx \dummy it =
        let ib = read-inline (ctx |> set-text-color Color.white) it in
        let w = get-natural-width ib in
        ib ++ inline-skip (0pt -' w)

    let-rec repeat-inline n ib =
        if n <= 0 then inline-nil else
            ib ++ (repeat-inline (n - 1) ib)

    let make-dots-line ctx w =
        let ib = read-inline ctx {.} ++ inline-skip 1pt in
        let wdot = get-natural-width ib in
        let n = round (w /' wdot) in
        inline-fil ++ (repeat-inline n ib)

    let document name bt1 bt2 bt3 bt4-1 bt4-2 bt5-1 bt5-2 =
        let page = A4Paper in
        let txtorg = (16.2mm, 19mm) in
        let txtwid = 177.6mm in
        let txthgt = 297mm -' 19mm -' 19mm in
        let hdrorg = (16.2mm, 15mm) in
        let ftrorg = (16.2mm, 297mm -' 19mm) in
        let hdrwid = txtwid in
        let ftrwid = txtwid in

        let () =
            FootnoteScheme.initialize ()
        in

        let ctx-doc = get-standard-context txtwid |> set-font-size font-size-main in

        let make-topic num it =
            let it-num = embed-string (arabic num) in
            let ctx-topic = set-font-size 10.5pt ctx-doc in
            let ib = read-inline ctx-topic { \font-style[FssStyle.bold]{(#it-num;) #it;} } in
            form-paragraph ctx-topic ib
        in

        let reset-numbers num sub =
            let () = num-chapter <- num in
            let () = num-subchap <- sub in
            let () = num-section <- 0 in
            num-subsection <- 0
        in

        let () = reset-numbers 2 1 in
        let bb-main-1-ib = read-block ctx-doc bt1 in
        let () = reset-numbers 2 2 in
        let bb-main-2-ib = read-block ctx-doc bt2 in
        let () = reset-numbers 3 0 in
        let bb-main-3-ib = read-block ctx-doc bt3 in
        let () = reset-numbers 4 1 in
        let bb-main-4-ib-1 = read-block ctx-doc bt4-1 in
        let () = reset-numbers 4 2 in
        let bb-main-4-ib-2 = read-block ctx-doc bt4-2 in
        let () = reset-numbers 5 1 in
        let bb-main-5-ib-1 = read-block ctx-doc bt5-1 in
        let () = reset-numbers 5 2 in
        let bb-main-5-ib-2 = read-block ctx-doc bt5-2 in

        let insert-header num =
            let fname = `patches/dc_header_0` ^ (arabic num) ^ `.pdf` in
            let ib = use-image-by-width (load-pdf-image fname 1) txtwid in
            form-paragraph ctx-doc ib
        in

        let bb-main =
            (insert-header 1)
            +++ bb-main-1-ib
            +++ clear-page
            +++ (insert-header 2)
            +++ bb-main-2-ib
            +++ clear-page
            +++ (insert-header 3)
            +++ bb-main-3-ib
            +++ clear-page
            +++ (insert-header 4)
            +++ make-topic 1 {研究に関する自己の強み}
            +++ bb-main-4-ib-1
            +++ make-topic 2 {今後研究者として更なる発展のため必要と考えている要素}
            +++ bb-main-4-ib-2
            +++ clear-page
            +++ (insert-header 5)
            +++ make-topic 1 {目指す研究者像}
            +++ bb-main-5-ib-1
            +++ make-topic 2 {上記の「目指す研究者像」に向けて、特別研究員の採用期間中に行う研究活動の位置づけ}
            +++ bb-main-5-ib-2
        in

        let pagecontf pbinfo =
            let () = FootnoteScheme.start-page () in
            (|
                text-origin = txtorg;
                text-height = txthgt;
            |)
        in
        let pagepartsf pbinfo =
            let pageno = pbinfo#page-number in
            let ctx =
                get-standard-context hdrwid
                    |> set-paragraph-margin 0pt 0pt
            in
            let header =
                let ctx-top-comment = ctx |> set-font-size 10.5pt in
                let ctx-comment = ctx |> set-font-size 8pt in
                let ib = match pageno with
                | 1 -> inline-fil ++ (read-inline ctx-top-comment {(DC 申請内容ファイル)})
                | 3 -> (read-inline ctx-comment {(研究目的・内容等の続き)})
                | 6 -> (read-inline ctx-comment {(研究遂行力の自己分析の続き)})
                | _ -> inline-nil
                in
                form-paragraph ctx ib
            in
            let footer-box-inner = read-inline ctx {申請者登録名　#name;　} in
            let (fw, fh, fd) = get-natural-metrics footer-box-inner in
            let footer-skip = 1.5cm in
            let footer-box = inline-graphics 0pt fh fd (fun (x, y) -> (
                [
                    draw-text (x +' footer-skip, y) footer-box-inner;
                    Gr.line (x +' footer-skip, y -' fd) (x +' footer-skip +' fw, y -' fd) |> stroke 1pt (Color.black)
                ]
            )) in
            let footer =
                let ctx = get-standard-context ftrwid in
                let it-pageno = embed-string (arabic (pbinfo#page-number + 2)) in
                line-break true true ctx
                    (inline-fil ++ (read-inline ctx {– #it-pageno; –}) ++ footer-box ++ inline-fil)
            in
            (|
                header-origin  = hdrorg;
                header-content = header;
                footer-origin  = ftrorg;
                footer-content = footer;
            |)
        in
        let doc = page-break page pagecontf pagepartsf (bb-main) in
        let () = register-outline (List.reverse !outline-ref) in
        doc

    let quad-indent ctx =
        inline-skip (get-font-size ctx *' font-ratio-cjk)

    let-block ctx +p inner =
        let ib-inner = read-inline ctx inner in
        let ib-parag = (quad-indent ctx) ++ ib-inner ++ inline-fil in
        form-paragraph ctx ib-parag

    let section-no-number-scheme ctx label title outline-title-opt inner =
        let ctx-title = make-section-title ctx in
        let () = increment num-section in
        let () = num-subsection <- 0 in
        let s-num = arabic (!num-chapter) ^ `.` ^ arabic (!num-section) in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let ib-num =
            read-inline ctx-title (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> (
                    let pageno = pbinfo#page-number in
                    register-cross-reference (label ^ `:page`) (arabic pageno)))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (1, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            let ib =
                inline-frame-breakable no-pads (Annot.register-location-frame label)
                    ((inline-fil) ++ ib-title ++ (inline-fil))
            in
            section-no-number-heading ctx ib
        in
        let bb-inner = read-block ctx inner in
        bb-title +++ bb-inner

    let make-number-decoration ctx color-b color-f it =
        let ctx = set-text-color color-f ctx in
        let ib = read-inline ctx it in
        let (w, h, d) = get-natural-metrics ib in
        let outset = (get-font-size ctx) *' 0.25 in
        let overhang = (get-font-size ctx) *' 0.2 in
        let underhang = (get-font-size ctx) *' 0.4 in
        inline-graphics (w +' outset) (h +' outset) (d +' outset) (fun (x, y) -> 
            [
                fill color-b (
                    start-path (x -' outset, y -' d -' outset)
                        |> line-to (x +' w +' outset +' overhang, y -' d -' outset)
                        |> line-to (x +' w +' outset -' underhang, y +' h +' outset)
                        |> line-to (x -' outset, y +' h +' outset)
                        |> close-with-line
                );
                draw-text (x, y) ib;
            ]
        )

    let section-scheme ctx label title outline-title-opt inner =
        let ctx-title = make-section-title ctx in
        let () = increment num-section in
        let () = num-subsection <- 0 in
        let s-num = if !num-subchap == 0 then
                arabic (!num-chapter) ^ `.` ^ arabic (!num-section)
            else
                arabic (!num-chapter) ^ `-(` ^ (arabic !num-subchap) ^ `).` ^ arabic (!num-section)
        in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let ib-num =
            make-number-decoration ctx-title (RGB(0.2,0.2,0.2)) Color.white (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> (
                    let pageno = pbinfo#page-number in
                    register-cross-reference (label ^ `:page`) (arabic pageno)))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (1, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            let ib =
                inline-frame-breakable no-pads (Annot.register-location-frame label)
                    (ib-num ++ (inline-skip 5pt) ++ ib-title ++ (inline-fil))
            in
            section-heading ctx ib
        in
        let bb-inner = read-block ctx inner in
        block-skip 5pt +++ bb-title +++ bb-inner


    let subsection-scheme ctx label title outline-title-opt inner =
        let () = num-subsection <- !num-subsection + 1 in
        let s-num = if !num-subchap == 0 then
                arabic (!num-chapter) ^ `.` ^ arabic (!num-section)
            else
                arabic (!num-chapter) ^ `-(` ^ (arabic !num-subchap) ^ `).` ^ arabic (!num-section)
        in
        let s-num = s-num ^ `.` ^ arabic (!num-subsection) in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let ctx-title = make-subsection-title ctx in
        let ib-num =
            make-number-decoration ctx-title (RGB(0.8,0.8,0.8)) Color.black (embed-string (s-num ^ `.`))
                ++ hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number))
        in
        let ib-title = read-inline ctx-title title in
        let outline-title = Option.from (extract-string ib-title) outline-title-opt in
        let () = outline-ref <- (2, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
        let bb-title =
            line-break true false (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
                (inline-frame-breakable no-pads (Annot.register-location-frame label)
                    (ib-num ++ (inline-skip 5pt) ++ ib-title ++ (inline-fil)))
        in
        let bb-inner = read-block ctx inner in
        block-skip 5pt +++ bb-title +++ bb-inner


    let-block ctx +section ?:labelopt ?:outline-title-opt title inner =
        let label =
            match labelopt with
            | None        -> generate-fresh-label ()
            | Some(label) -> `sec:` ^ label
        in
        section-scheme ctx label title outline-title-opt inner

    let-block ctx +section-no-number ?:outline-title-opt title inner =
        let label = generate-fresh-label () in
        section-no-number-scheme ctx label title outline-title-opt inner


    let-block ctx +subsection ?:labelopt ?:outline-title-opt title inner =
        let label =
            match labelopt with
            | None        -> generate-fresh-label ()
            | Some(label) -> `sec:` ^ label
        in
        subsection-scheme ctx label title outline-title-opt inner


    let theorem-scheme ctx ctxf category wordopt label inner =
        let () = increment num-theorems in
        let s-num =
            (arabic (!num-chapter)) ^ `.` ^ (arabic (!num-section)) ^ `.` ^ (arabic (!num-theorems))
        in
        let () = register-cross-reference (label ^ `:num`) s-num in
        let it-num = embed-string s-num in
        let ib-dfn =
            read-inline (ctx |> set-latin-font font-latin-bold) {#category; #it-num;}
        in
        let ib-word =
            match wordopt with
            | None       -> inline-nil
            | Some(word) -> read-inline ctx {\ (#word;).}
        in
        let ib-inner = read-inline (ctxf ctx) inner in
        line-break true true ctx
            (ib-dfn ++ ib-word ++ inline-skip (get-font-size ctx) ++ ib-inner ++ inline-fil)


    let make-label prefix labelopt =
        match labelopt with
        | None    -> generate-fresh-label ()
        | Some(s) -> prefix ^ s


    let-block ctx +definition ?:wordopt ?:labelopt inner =
        let label = make-label `definition:` labelopt in
        theorem-scheme ctx (fun x -> x) {Definition} wordopt label inner


    let-block ctx +theorem ?:wordopt ?:labelopt inner =
        let label = make-label `theorem:` labelopt in
        theorem-scheme ctx (set-latin-font font-latin-italic) {Theorem} wordopt label inner


    let-block ctx +lemma ?:wordopt ?:labelopt inner =
        let label = make-label `lemma:` labelopt in
        theorem-scheme ctx (set-latin-font font-latin-italic) {Lemma} wordopt label inner


    let-block ctx +corollary ?:wordopt ?:labelopt inner =
        let label = make-label `corollary:` labelopt in
        theorem-scheme ctx (set-latin-font font-latin-italic) {Corollary} wordopt label inner


    let-block ctx +example ?:wordopt ?:labelopt inner =
        let label = make-label `example:` labelopt in
        theorem-scheme ctx (fun x -> x) {Example} wordopt label inner


    let-block ctx +proof ?:wordopt inner =
        let ib-heading =
            let ctx = ctx |> set-latin-font font-latin-italic in
            match wordopt with
            | None    -> read-inline ctx {Proof.}
            | Some(w) -> read-inline ctx {Proof of #w;.}
        in
        let ib-box = read-inline ctx {▪} in
        line-break true true ctx
            (ib-heading ++ inline-skip (get-font-size ctx) ++ read-inline ctx inner ++ inline-fil ++ ib-box)


    let-inline ctx \emph inner =
        let ctx =
            ctx |> set-font Latin font-latin-sans
                |> set-cjk-font font-cjk-gothic
        in
        read-inline ctx inner


    let-inline \dfn inner = {\emph{#inner;}}


    let-inline ctx \footnote it =
        let size = get-font-size ctx in
        let ibf num =
            let it-num = embed-string (arabic num) in
            let ctx =
                ctx |> set-font-size (size *' 0.75)
                    |> set-manual-rising (size *' 0.25)
            in
            read-inline ctx {\*#it-num;}
        in
        let bbf num =
            let it-num = embed-string (arabic num) in
            let ctx =
                ctx |> set-font-size (size *' 0.9)
                    |> set-leading (size *' 1.2)
                    |> set-paragraph-margin (size *' 0.5) (size *' 0.5)
                    %temporary
            in
            line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
        in
        FootnoteScheme.main ctx ibf bbf
end


% vim: set expandtab :
